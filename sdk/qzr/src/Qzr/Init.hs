-----------------------------------------------------------------------------
-- |
-- Copyright   : (C) 2015 Dimitri Sabadie
-- License     : BSD3
--
-- Maintainer  : Dimitri Sabadie <dimitri.sabadie@gmail.com>
-- Stability   : experimental
-- Portability : portable
--
----------------------------------------------------------------------------

module Qzr.Init (
    -- * Quaazar projection initialization
    init
  ) where

import System.Directory ( createDirectoryIfMissing )
import System.FilePath ( (</>), FilePath )
import Prelude hiding ( init )

init :: String -> FilePath -> IO ()
init projectName path = do
    createDirectoryIfMissing True projectRoot
    createDirectoryIfMissing True dataRoot
    createDirectoryIfMissing True $ dataRoot </> "lights"
    createDirectoryIfMissing True $ dataRoot </> "materials"
    createDirectoryIfMissing True $ dataRoot </> "meshes"
    createDirectoryIfMissing True $ dataRoot </> "textures"
    createDirectoryIfMissing True srcRoot
    writeFile (srcRoot </> "Main.hs") mainHS
  where
    projectRoot = path </> projectName
    dataRoot = projectRoot </> "data"
    srcRoot = projectRoot </> "src"

mainHS :: String
mainHS = unlines
  [
    replicate 79 '-'
  , "-- generated by: qzr init"
  , replicate 79 '-'
  , ""
  , "import Control.Monad ( unless )"
  , "import Control.Monad.Trans.Either ( runEitherT )"
  , "import Control.Monad.Trans.Journal ( runJournalT )"
  , "import Numeric.Natural ( Natural )"
  , "import Quaazar"
  , "import Quaazar.Event ( Closed, Escape, Event(..), KeyReleased, Quit)"
  , ""
  , "screenW,screenH :: Natural"
  , "screenW = 800"
  , "screenH = 600"
  , ""
  , "fullscreen :: Bool"
  , "fullscreen = False"
  , ""
  , "screenTitle :: String"
  , "screenTitle = \"quaazar\""
  , ""
  , "main :: IO ()"
  , "main = withQuaazar screenW screenH fullscreen screenTitle application"
  , ""
  , "application :: Window -> IO [Event] -> IO ()"
  , "application win pollEvents = go"
  , "  where"
  , "    go = do"
  , "      events <- pollEvents"
  , "      unless (hasQuit events) go"
  , "    hasQuit events ="
  , "         SystemEvent Quit `elem` events"
  , "      || KeyEvent Escape KeyReleased `elem` events"
  , "      || WindowEvent Closed `elem` events"
  ]
